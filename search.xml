<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++知识点</title>
    <url>/2021/09/11/cxx-cast/</url>
    <content><![CDATA[<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><code>static_cast</code><br><code>dynamic_cast</code><br><code>const_cast</code><br><code>reinterpret_cast</code></p>
<p>static_cast </p>
<ul>
<li><p>基本数据类型之间的转换</p>
</li>
<li><p>类间的转换：基类和派生类间的引用、指针<br>上行转换 （ derived –&gt; base ) 是安全的；下行转换( base –&gt; derived) 是不安全的</p>
</li>
</ul>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>类型转换cast</tag>
      </tags>
  </entry>
  <entry>
    <title>以汇编的角度理解调用约定</title>
    <url>/2021/08/07/assemble_cc/</url>
    <content><![CDATA[<blockquote>
<p>在正文行文之前，分享一个在线编译compiler explorer <a href="https://godbolt.org/">https://godbolt.org</a>，可以选择编译器类型及属性设置<br><img src="/2021/08/07/assemble_cc/complier_explorer.png" alt="online_complier"></p>
</blockquote>
<h2 id="汇编看调用约定"><a href="#汇编看调用约定" class="headerlink" title="汇编看调用约定"></a>汇编看调用约定</h2><p>今天先看一下3种调用约定<code>cdecl</code>，<code>stdcall</code>，<code>fastcall</code></p>
<span id="more"></span>
<h3 id="X86模式下的调用约定"><a href="#X86模式下的调用约定" class="headerlink" title="X86模式下的调用约定"></a>X86模式下的调用约定</h3><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成32位intel风格的汇编代码</span></span><br><span class="line">g++ -S -m32 -masm=intel test.cpp</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __attribute__((__cdecl__)) <span class="built_in">cdecl_f</span>(<span class="keyword">int</span> c1, <span class="keyword">int</span> c2) &#123;</span><br><span class="line">   <span class="keyword">return</span> c1 + c2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __attribute__((__stdcall__)) <span class="built_in">stdcall_f</span>(<span class="keyword">int</span> s1, <span class="keyword">int</span> s2) &#123;</span><br><span class="line">      <span class="keyword">return</span> s1*s2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __attribute__((__fastcall__)) <span class="built_in">fastcall_f</span>(<span class="keyword">int</span> f1, <span class="keyword">int</span> f2, <span class="keyword">int</span> f3, <span class="keyword">int</span> f4, <span class="keyword">int</span> f5, <span class="keyword">int</span> f6, <span class="keyword">int</span> f7) &#123;</span><br><span class="line">      <span class="keyword">return</span> f1 + f2 + f3 + f4 + f5 + f6 + f7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cdecl_f</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">stdcall_f</span>(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">fastcall_f</span>(<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main函数的汇编代码段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:</span><br><span class="line">.LFB3:</span><br><span class="line">▸   .cfi_startproc</span><br><span class="line">▸   endbr32</span><br><span class="line">▸   push▸   ebp</span><br><span class="line">▸   .cfi_def_cfa_offset 8</span><br><span class="line">▸   .cfi_offset 5, -8</span><br><span class="line">▸   mov▸ebp, esp</span><br><span class="line">▸   .cfi_def_cfa_register 5</span><br><span class="line">▸   call▸   __x86.get_pc_thunk.ax</span><br><span class="line">▸   add▸eax, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_</span><br><span class="line"></span><br><span class="line">▸   push▸   2            ; 2压入栈，esp下移4字节</span><br><span class="line">▸   push▸   1            ; 1压入栈，esp下移4字节</span><br><span class="line">▸   call▸   _Z7cdecl_fii ; call cdecl_f函数</span><br><span class="line">▸   add▸esp, 8           ; esp上移8字节</span><br><span class="line">; 对于__cdecl__调用约定函数，函数调用者清理栈</span><br><span class="line">; 参数压栈方向: 从右向左</span><br><span class="line"></span><br><span class="line">▸   push▸   5</span><br><span class="line">▸   push▸   4</span><br><span class="line">▸   call▸   _Z9stdcall_fii</span><br><span class="line">; 对于__stdcall__调用约定，没看到函数调用者清理栈，参看stdcall_f汇编代码</span><br><span class="line">; 参数压栈方向: 从右向左</span><br><span class="line"></span><br><span class="line">▸   push▸   14</span><br><span class="line">▸   push▸   13</span><br><span class="line">▸   push▸   12</span><br><span class="line">▸   push▸   11</span><br><span class="line">▸   push▸   10</span><br><span class="line">▸   mov▸edx, 9</span><br><span class="line">▸   mov▸ecx, 8</span><br><span class="line">▸   call▸   _Z10fastcall_fiiiiiii</span><br><span class="line">; 对于__fastcall__调用约定，优先使用寄存器，其他参数使用栈存储，同样没看到函数调用者清理栈</span><br><span class="line">; 参数压栈方向: 从右向左</span><br><span class="line"></span><br><span class="line">▸   mov▸eax, 0</span><br><span class="line">▸   leave</span><br><span class="line">▸   .cfi_restore 5</span><br><span class="line">▸   .cfi_def_cfa 4, 4</span><br><span class="line">▸   ret</span><br><span class="line">▸   .cfi_endproc</span><br></pre></td></tr></table></figure>
<p>stdcall_f函数汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_Z9stdcall_fii:</span><br><span class="line">.LFB1:</span><br><span class="line">▸   .cfi_startproc</span><br><span class="line">▸   endbr32</span><br><span class="line">▸   push▸   ebp</span><br><span class="line">▸   .cfi_def_cfa_offset 8</span><br><span class="line">▸   .cfi_offset 5, -8</span><br><span class="line">▸   mov▸ebp, esp</span><br><span class="line">▸   .cfi_def_cfa_register 5</span><br><span class="line">▸   call▸   __x86.get_pc_thunk.ax</span><br><span class="line">▸   add▸eax, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_</span><br><span class="line"></span><br><span class="line">▸   mov▸eax, DWORD PTR 8[ebp]</span><br><span class="line">▸   imul▸   eax, DWORD PTR 12[ebp]</span><br><span class="line"></span><br><span class="line">▸   pop▸ebp</span><br><span class="line">▸   .cfi_restore 5</span><br><span class="line">▸   .cfi_def_cfa 4, 4</span><br><span class="line"></span><br><span class="line">▸   ret▸8 ; ret 8除了更新eip寄存器之外，还要将esp加8字节</span><br><span class="line">          ; 正好回到了main函数调用stdcall_f时，压入两个int参数的位置</span><br><span class="line">          ; 这就是函数自己完成了栈空间的清理</span><br><span class="line"></span><br><span class="line">▸   .cfi_endproc</span><br></pre></td></tr></table></figure>
<p>fastcall_f函数汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_Z10fastcall_fiiiiiii:</span><br><span class="line">.LFB2:</span><br><span class="line">▸   .cfi_startproc</span><br><span class="line">▸   endbr32</span><br><span class="line">▸   push▸   ebp</span><br><span class="line">▸   .cfi_def_cfa_offset 8</span><br><span class="line">▸   .cfi_offset 5, -8</span><br><span class="line">▸   mov▸ebp, esp</span><br><span class="line">▸   .cfi_def_cfa_register 5</span><br><span class="line">▸   sub▸esp, 8</span><br><span class="line">▸   call▸   __x86.get_pc_thunk.ax</span><br><span class="line">▸   add▸eax, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_</span><br><span class="line">▸   mov▸DWORD PTR -4[ebp], ecx</span><br><span class="line">▸   mov▸DWORD PTR -8[ebp], edx</span><br><span class="line">▸   mov▸edx, DWORD PTR -4[ebp]</span><br><span class="line">▸   mov▸eax, DWORD PTR -8[ebp]</span><br><span class="line">▸   add▸edx, eax</span><br><span class="line">▸   mov▸eax, DWORD PTR 8[ebp]</span><br><span class="line">▸   add▸edx, eax</span><br><span class="line">▸   mov▸eax, DWORD PTR 12[ebp]</span><br><span class="line">▸   add▸edx, eax</span><br><span class="line">▸   mov▸eax, DWORD PTR 16[ebp]</span><br><span class="line">▸   add▸edx, eax</span><br><span class="line">▸   mov▸eax, DWORD PTR 20[ebp]</span><br><span class="line">▸   add▸edx, eax</span><br><span class="line">▸   mov▸eax, DWORD PTR 24[ebp]</span><br><span class="line">▸   add▸eax, edx</span><br><span class="line">▸   leave</span><br><span class="line">▸   .cfi_restore 5</span><br><span class="line">▸   .cfi_def_cfa 4, 4</span><br><span class="line"></span><br><span class="line">▸   ret▸20 ; 此处的理解同stdcall_f函数，20的原因是调用fastcall_f时，栈压入了5个int参数</span><br><span class="line"></span><br><span class="line">▸   .cfi_endproc</span><br></pre></td></tr></table></figure>

<h4 id="window"><a href="#window" class="headerlink" title="window"></a>window</h4><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table>
<thead>
<tr>
<th>约定方式</th>
<th>函数传参方式</th>
<th>空间清理方和方式</th>
</tr>
</thead>
<tbody><tr>
<td><code>stdcall</code></td>
<td>从右到左</td>
<td>函数自身</td>
</tr>
<tr>
<td><code>cdecl</code></td>
<td>从右到左</td>
<td>函数调用者</td>
</tr>
<tr>
<td><code>fastcall</code></td>
<td>从右到左，先使用寄存器，寄存器不够，再使用栈</td>
<td>函数调用者</td>
</tr>
</tbody></table>
<h4 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h4><p>之前面试的时候，有面试官问过<code>__stdcall</code>和<code>__cdecl</code>之间的区别：现在我最新的理解是<code>__cdecl</code>规定函数调用者去实现栈空间的清理，意味着调用函数的每个地方都有栈清理，生成的文件必然要大，但正是这种约定是支持可变参数的。<code>__stdcall</code>函数自身清理栈空间，那么自然生成的文件相比<code>__cdecl</code>而言要小，因为调用函数的地方只有一句<code>call method</code>，但可变参数个数的函数形式必然是支持不了的，因为<code>__stdcall</code>调用约定形式的函数，在汇编时无法确定要清理多大的栈空间<code>ret ??</code>。</p>
<p><a href="https://www.cnblogs.com/sober/archive/2009/09/01/1558178.html">参考资料 C/C++中什么时候需要使用__stdcall?</a></p>
<p>或许还有安全的考虑，<code>__stdcall</code>函数是自己清理栈空间，什么时候清理，函数自己是清楚的。<code>__cdecl</code>函数栈空间是否有效，函数是不知道的，只是单纯去访问。</p>
<h3 id="X64模式下的调用约定"><a href="#X64模式下的调用约定" class="headerlink" title="X64模式下的调用约定"></a>X64模式下的调用约定</h3><h4 id="linux-1"><a href="#linux-1" class="headerlink" title="linux"></a>linux</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">g++ -S -m64 -masm=intel test.cpp -Wall</span><br><span class="line"></span><br><span class="line">test.cpp:2:54: warning: ‘cdecl’ attribute ignored [-Wattributes]</span><br><span class="line">  2 | int __attribute__((__cdecl__)) cdecl_f(int c1, int c2) &#123;</span><br><span class="line">    |                                                      ^</span><br><span class="line">test.cpp:6:58: warning: ‘stdcall’ attribute ignored [-Wattributes]</span><br><span class="line">  6 | int __attribute__((__stdcall__)) stdcall_f(int s1, int s2) &#123;</span><br><span class="line">    |                                                          ^</span><br><span class="line">test.cpp:10:100: warning: ‘fastcall’ attribute ignored [-Wattributes]</span><br><span class="line"> 10 | int __attribute__((__fastcall__)) fastcall_f(int f1, int f2, int f3, int f4, int f5, int f6, int f7) &#123;</span><br></pre></td></tr></table></figure>
<p>同样的代码，当编译为64位模式时，即使调用约定明文指定，也会被忽略。main函数汇编代码段如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:</span><br><span class="line">.LFB3:</span><br><span class="line">▸   .cfi_startproc</span><br><span class="line">▸   endbr64</span><br><span class="line">▸   push▸   rbp</span><br><span class="line">▸   .cfi_def_cfa_offset 16</span><br><span class="line">▸   .cfi_offset 6, -16</span><br><span class="line">▸   mov▸rbp, rsp</span><br><span class="line">▸   .cfi_def_cfa_register 6</span><br><span class="line"></span><br><span class="line">▸   mov▸esi, 2</span><br><span class="line">▸   mov▸edi, 1</span><br><span class="line">▸   call▸   _Z7cdecl_fii   ; 与x86相比，并没有使用栈传递参数，而使用寄存器</span><br><span class="line"></span><br><span class="line">▸   mov▸esi, 5</span><br><span class="line">▸   mov▸edi, 4</span><br><span class="line">▸   call▸   _Z9stdcall_fii</span><br><span class="line"></span><br><span class="line">▸   push▸   14    ; 多出的参数，只能使用栈</span><br><span class="line">▸   mov▸r9d, 13   ; 64位函数参数寄存器, 就如下几个</span><br><span class="line">▸   mov▸r8d, 12</span><br><span class="line">▸   mov▸ecx, 11</span><br><span class="line">▸   mov▸edx, 10</span><br><span class="line">▸   mov▸esi, 9</span><br><span class="line">▸   mov▸edi, 8</span><br><span class="line">▸   call▸   _Z10fastcall_fiiiiiii</span><br><span class="line">▸   add▸rsp, 8    ; 使用了栈，就要退回原位置，从这点看在64位下，调用者清理栈</span><br><span class="line"></span><br><span class="line">▸   mov▸eax, 0</span><br><span class="line">▸   leave</span><br><span class="line">▸   .cfi_def_cfa 7, 8</span><br><span class="line">▸   ret</span><br><span class="line">▸   .cfi_endproc</span><br></pre></td></tr></table></figure>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>x64模式下的默认函数调用约定是什么呢？</li>
<li>x64模式下，好像是函数调用者清理栈(当然是函数参数寄存器都占用完，用栈存储其他函数参数)</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>汇编</tag>
        <tag>Call Convention</tag>
      </tags>
  </entry>
  <entry>
    <title>docker日常使用</title>
    <url>/2021/07/26/docker/</url>
    <content><![CDATA[<h2 id="docker服务创建的文件和文件夹，host具有相同的权限"><a href="#docker服务创建的文件和文件夹，host具有相同的权限" class="headerlink" title="docker服务创建的文件和文件夹，host具有相同的权限"></a>docker服务创建的文件和文件夹，host具有相同的权限</h2><ol>
<li>近日想搭个人静态网站，搜索最快的实现方式，随即就看到了hexo这种技术方案。发挥程序员最大特点“懒”，故想使用docker制作个运行环境，免除重装系统时的痛苦或者快速分享给周围朋友，岂不美哉。</li>
<li>我的想法是：markdown的编写还是在host上完成，运行docker服务编译生成静态网站文件。这就遇到了点问题！<blockquote>
<p>当我们用如下的命令启动docker服务时, 在容器内[container dir]创建文件或者文件夹，所属用户和组必然是root。<br>那么，在host这侧必然是只读状态，除非host也是root用户。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -v [host dir]:[container dir] -it [docker_image] /bin/bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>解决方式，通过创建服务时，传入host的用户id和组id</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -v [host dir]:[container dir] -u [uid]:[gid] -it [docker_image] /bin/bash</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>gdb的基本使用</title>
    <url>/2021/07/26/gdb/</url>
    <content><![CDATA[<blockquote>
<p>近期在linux下的开发项目告一阶段, 为了防止手生，特此以写博客的形式, 将基本知识再次复习一下。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用test.cpp作为例子, 代码如下</span></span><br><span class="line">cat test.cpp</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="number">0</span> == i%<span class="number">2</span>) &#123;</span><br><span class="line">          std::cout &lt;&lt; <span class="string">&quot;0 == i%2&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == i%<span class="number">3</span>) &#123;</span><br><span class="line">          std::cout &lt;&lt; <span class="string">&quot;0 == i%3&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// do nothing</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">new_buff</span>() &#123;</span><br><span class="line">    <span class="keyword">char</span>* pb = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">16</span>];</span><br><span class="line">    pb[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    pb[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    pb[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* pbsw = *(&amp;pb);</span><br><span class="line"></span><br><span class="line">    pb = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pbsw;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">demo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">new_buff</span>();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello, guests&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置-查看启动参数"><a href="#设置-查看启动参数" class="headerlink" title="设置/查看启动参数"></a>设置/查看启动参数</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) <span class="built_in">set</span> args hello world</span><br><span class="line">(gdb) show args</span><br></pre></td></tr></table></figure>
<h2 id="改变调试时变量的值"><a href="#改变调试时变量的值" class="headerlink" title="改变调试时变量的值"></a>改变调试时变量的值</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> var [variable]=[value]</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="打印内存"><a href="#打印内存" class="headerlink" title="打印内存"></a>打印内存</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) <span class="built_in">help</span> x</span><br><span class="line">Examine memory: x/FMT ADDRESS.</span><br><span class="line">1. ADDRESS is an expression <span class="keyword">for</span> the memory address to examine.</span><br><span class="line">2. FMT is a repeat count followed by a format letter and a size letter.</span><br><span class="line">    1) Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),</span><br><span class="line">        t(binary), f(<span class="built_in">float</span>), a(address), i(instruction), c(char), s(string)</span><br><span class="line">        and z(hex, zero padded on the left).</span><br><span class="line">    2) Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).</span><br><span class="line"></span><br><span class="line">The specified number of objects of the specified size are printed according to the format.</span><br><span class="line">If a negative number is specified, memory is examined backward from the address.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印pb内存中的值</span></span><br><span class="line">(gdb) x/16xb pb</span><br><span class="line">0x55555556aeb0: 0x01    0x02    0x03    0x00    0x00    0x00    0x00    0x00</span><br><span class="line">0x55555556aeb8: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<h2 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成调试信息</span></span><br><span class="line">g++ -g test.cpp -o <span class="built_in">test</span></span><br><span class="line">gdb <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/26/gdb/gdb_entry.png" alt="entry"></p>
<h3 id="设置-查看断点"><a href="#设置-查看断点" class="headerlink" title="设置/查看断点"></a>设置/查看断点</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) b demo</span><br><span class="line">(gdb) b main</span><br><span class="line">(gdb) info breakpoints</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x00000000000011a9 <span class="keyword">in</span> demo() at test.cpp:3</span><br><span class="line">2       breakpoint     keep y   0x000000000000125b <span class="keyword">in</span> main() at test.cpp:15</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<h3 id="disable-enable某个断点"><a href="#disable-enable某个断点" class="headerlink" title="disable/enable某个断点"></a>disable/enable某个断点</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) <span class="built_in">disable</span> breakpoints 1</span><br><span class="line">(gdb) info breakpoints</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line"><span class="comment"># 可以看到对于断点1其Enb状态由y变为n</span></span><br><span class="line">1       breakpoint     keep n   0x00000000000011a9 <span class="keyword">in</span> demo() at test.cpp:3</span><br><span class="line">2       breakpoint     keep y   0x000000000000125b <span class="keyword">in</span> main() at test.cpp:15</span><br><span class="line">(gdb) <span class="built_in">enable</span> breakpoints 1</span><br><span class="line">(gdb) info breakpoints</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line"><span class="comment"># 可以看到对于断点1其Enb状态由n变为y</span></span><br><span class="line">1       breakpoint     keep y   0x00000000000011a9 <span class="keyword">in</span> demo() at test.cpp:3</span><br><span class="line">2       breakpoint     keep y   0x000000000000125b <span class="keyword">in</span> main() at test.cpp:15</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<h3 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) b 6 <span class="keyword">if</span> i == 10 <span class="comment"># 当i更新为10时, 断点生效</span></span><br><span class="line">(gdb) info breakpoints</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x0000000000001226 <span class="keyword">in</span> demo() at test.cpp:6</span><br><span class="line">        stop only <span class="keyword">if</span> i == 10</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<h3 id="删除断点"><a href="#删除断点" class="headerlink" title="删除断点"></a>删除断点</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看clear和delete的解释说明</span></span><br><span class="line">(gdb) <span class="built_in">help</span> clear <span class="comment"># Clear breakpoint at specified location. Argument may be a linespec, explicit, or address location as described below.</span></span><br><span class="line">(gdb) <span class="built_in">help</span> delete <span class="comment"># Delete all or some breakpoints. Arguments are breakpoint numbers with spaces in between.</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<h3 id="观察点watchpoint"><a href="#观察点watchpoint" class="headerlink" title="观察点watchpoint"></a>观察点watchpoint</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) <span class="built_in">help</span> watch <span class="comment"># 可以监视变量什么时候被修改</span></span><br><span class="line">Set a watchpoint <span class="keyword">for</span> an expression. A watchpoint stops execution of your program whenever the value of an expression changes.</span><br><span class="line">(gdb) p pb</span><br><span class="line"><span class="variable">$10</span> = 0x55555556b2c0 <span class="string">&quot;&quot;</span></span><br><span class="line">(gdb) watch *0x55555556b2c0</span><br><span class="line">Hardware watchpoint 15: *0x55555556b2c0</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Hardware watchpoint 15: *0x55555556b2c0</span><br><span class="line"></span><br><span class="line">Old value = 0</span><br><span class="line">New value = 1</span><br><span class="line">new_buff () at test.cpp:19</span><br><span class="line">19          pb[1] = 2;</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Hardware watchpoint 15: *0x55555556b2c0</span><br><span class="line"></span><br><span class="line">Old value = 1</span><br><span class="line">New value = 513</span><br><span class="line">new_buff () at test.cpp:20</span><br><span class="line">20          pb[2] = 3;</span><br><span class="line">(gdb) </span><br></pre></td></tr></table></figure>
<h2 id="栈帧frame"><a href="#栈帧frame" class="headerlink" title="栈帧frame"></a>栈帧frame</h2><p>在研究栈帧之前，先复习一下可执行程序载入内存时的布局，以linux举例说明。<br><img src="/2021/07/26/gdb/linuxFlexibleAddressSpaceLayout.png" alt="elf memory layout"></p>
<h3 id="显示寄存器内容"><a href="#显示寄存器内容" class="headerlink" title="显示寄存器内容"></a>显示寄存器内容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) info reg</span><br><span class="line">(gdb) layout regs # 窗口显示</span><br></pre></td></tr></table></figure>
<h3 id="汇编单步"><a href="#汇编单步" class="headerlink" title="汇编单步"></a>汇编单步</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) help si # 可以进入调用函数</span><br><span class="line">Step one instruction exactly.</span><br><span class="line">Usage: stepi [N]</span><br><span class="line">Argument N means step N times (or till program stops for another reason).</span><br><span class="line"></span><br><span class="line">(gdb) help ni</span><br><span class="line">Step one instruction, but proceed through subroutine calls.</span><br><span class="line">Usage: nexti [N]</span><br><span class="line">Argument N means step N times (or till program stops for another reason).</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以下面的源码举例说明</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">layer1</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> b1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c1 = a1 + b1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">layer1</span>(a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h3><blockquote>
<p>tips: 在intel机器上，如果喜欢intel风格的汇编代码, 可在gdb中敲入set disassembly-flavor intel</p>
</blockquote>
<h4 id="查看调用关系"><a href="#查看调用关系" class="headerlink" title="查看调用关系"></a>查看调用关系</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">(gdb) bt full</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/26/gdb/gdb_bt.png" alt="gdb_bt"></p>
<h4 id="查看帧-frame"><a href="#查看帧-frame" class="headerlink" title="查看帧(frame)"></a>查看帧(frame)</h4><p><img src="/2021/07/26/gdb/gdb_frame.png" alt="gdb_frame"><br><strong>问题解答：</strong></p>
<ul>
<li><strong>call</strong> 在main函数执行call layer1(int,int)时，会将”return 0”的指令地址压入layer1的栈空间</li>
<li><strong>ret</strong> 执行完layer1函数的”pop rbp”，正好回到了0x7f..fe168的位置, 执行ret时将栈顶的值出栈，并赋给rip<br><img src="/2021/07/26/gdb/gdb_result.png"><h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3>溢出情景：</li>
</ul>
<ul>
<li>递归函数</li>
<li>局部变量过大，比如超大数组<h3 id="栈内存溢出"><a href="#栈内存溢出" class="headerlink" title="栈内存溢出"></a>栈内存溢出</h3></li>
<li><font color="red">有栈内存溢出这种概念吗？</font></li>
<li><font color="red">如果有的话，比如一个接收外部输入的可执行程序，其只定义了4个字节char buf[4]，输入超长信息，导致后面的栈空间被污染，这种场景算是栈溢出还是栈内存溢出?</font><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2></li>
</ul>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>linux日常</title>
    <url>/2021/07/26/linux/</url>
    <content><![CDATA[<h2 id="git小技巧"><a href="#git小技巧" class="headerlink" title="git小技巧"></a>git小技巧</h2><p>有时个人开发、公司项目会在同一台电脑上，所以要区分开git账户信息。今天分享一下小技巧：可以在$HOME下的.gitconfig(<strong>全局git配置文件</strong>)增加如下的字段信息<strong>includeIf</strong>，其中${project path}是指工作仓库存放的本地路径，<code>.gitconfig.work</code>与.gitconfig同处一个目录下。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[includeIf &quot;gitdir:$&#123;project path&#125;&quot;]</span></span><br><span class="line">	<span class="attr">path</span> = .gitconfig.work</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .gitconfig.work</span></span><br><span class="line"><span class="section">[user]</span></span><br><span class="line">	<span class="attr">name</span> = work_name</span><br><span class="line">	<span class="attr">email</span> = profile@company.com</span><br></pre></td></tr></table></figure>

<h2 id="查看当前linux下的用户信息"><a href="#查看当前linux下的用户信息" class="headerlink" title="查看当前linux下的用户信息"></a>查看当前linux下的用户信息</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br><span class="line"><span class="comment"># 用户名:加密密码:用户id:组id:用户信息:家目录:shell类型</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以如下命令查找当前用户</span></span><br><span class="line">cat /etc/passwd | grep <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>
<h2 id="sed替换指定文本"><a href="#sed替换指定文本" class="headerlink" title="sed替换指定文本"></a>sed替换指定文本</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat replace.txt</span><br><span class="line">https://github.com/xxx/yyy.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 欲将github.com替换为gitclone.com/github.com</span></span><br><span class="line">sed -i <span class="string">&#x27;s#github.com#gitclone.com/github.com#&#x27;</span> replace.txt</span><br><span class="line"><span class="comment"># 欲生成新文件</span></span><br><span class="line">sed -i <span class="string">&#x27;s#github.com#gitclone.com/github.com#&#x27;</span> replace.txt &gt; new.txt</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/1970/01/01/%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>宏 和 常量 的区别</p>
<p>1.宏在预处理前进行替换<br>2.const在编译期间进行替换<br>3.const有类型判断，合法校验</p>
<p>mutable 知识点</p>
]]></content>
  </entry>
</search>
